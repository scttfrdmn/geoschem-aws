#!/bin/bash
# GCHP High Performance Runner Script

set -e

SIMULATION=""
RESOLUTION=""
CORES=""
CONFIG_DIR="/workspace/config"
DATA_DIR="/workspace/data"
OUTPUT_DIR="/workspace/output"
START_DATE=""
END_DATE=""
DRY_RUN=""

# Parse arguments (passed from entrypoint)
while [[ $# -gt 0 ]]; do
    case $1 in
        --simulation) SIMULATION="$2"; shift 2;;
        --resolution) RESOLUTION="$2"; shift 2;;
        --cores) CORES="$2"; shift 2;;
        --config-dir) CONFIG_DIR="$2"; shift 2;;
        --data-dir) DATA_DIR="$2"; shift 2;;
        --output-dir) OUTPUT_DIR="$2"; shift 2;;
        --start-date) START_DATE="$2"; shift 2;;
        --end-date) END_DATE="$2"; shift 2;;
        --dry-run) DRY_RUN=1; shift;;
        *) echo "Unknown argument: $1"; exit 1;;
    esac
done

echo "Running GCHP High Performance Mode"
echo "Simulation: $SIMULATION"
echo "Resolution: $RESOLUTION"
echo "MPI Processes: $CORES"

# Validate core count for GCHP
if [[ $CORES -lt 6 ]]; then
    echo "Warning: GCHP typically requires at least 6 cores for stable execution"
fi

# Calculate optimal decomposition for the given core count and resolution
calculate_decomposition() {
    local cores=$1
    local resolution=$2
    
    case $resolution in
        C48|C90)
            # Lower resolutions can use fewer cores
            echo "6 1"  # 6 faces, 1 core per face minimum
            ;;
        C180)
            # Medium resolution
            if [[ $cores -ge 24 ]]; then
                echo "6 4"  # 24 cores total
            else
                echo "6 2"  # 12 cores total
            fi
            ;;
        C360)
            # High resolution
            if [[ $cores -ge 48 ]]; then
                echo "6 8"  # 48 cores total
            else
                echo "6 4"  # 24 cores total
            fi
            ;;
        *)
            # Default decomposition
            local cores_per_face=$((cores / 6))
            [[ $cores_per_face -lt 1 ]] && cores_per_face=1
            echo "6 $cores_per_face"
            ;;
    esac
}

# Set up run directory
RUN_DIR="$OUTPUT_DIR/gchp_${SIMULATION}_${RESOLUTION}_${CORES}cores_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$RUN_DIR"

# Copy GCHP configuration template
TEMPLATE_DIR="/opt/geoschem/gchp_templates/${SIMULATION}"
if [[ -d "$TEMPLATE_DIR" ]]; then
    echo "Copying GCHP configuration from $TEMPLATE_DIR"
    cp -r "$TEMPLATE_DIR"/* "$RUN_DIR/"
else
    echo "Warning: No GCHP template found for $SIMULATION, creating basic setup"
    # Create basic GCHP configuration files
    cat > "$RUN_DIR/gchp.run" << EOF
#!/bin/bash
# Basic GCHP run script
# Simulation: $SIMULATION
# Resolution: $RESOLUTION  
# Cores: $CORES
# Generated by GeosChem Container
EOF
    chmod +x "$RUN_DIR/gchp.run"
fi

cd "$RUN_DIR"

# Calculate processor decomposition
decomp=($(calculate_decomposition $CORES $RESOLUTION))
NX=${decomp[0]}
NY=${decomp[1]}
TOTAL_CORES=$((NX * NY))

echo "Processor decomposition: ${NX} x ${NY} = ${TOTAL_CORES} cores"

if [[ $TOTAL_CORES -ne $CORES ]]; then
    echo "Warning: Adjusted core count from $CORES to $TOTAL_CORES for optimal decomposition"
    CORES=$TOTAL_CORES
fi

# Set up data directory links
if [[ -d "$DATA_DIR" ]]; then
    echo "Linking input data from $DATA_DIR"
    ln -sf "$DATA_DIR" ExtData
else
    echo "Warning: No input data directory found at $DATA_DIR"
fi

# Configure MPI environment
export OMPI_ALLOW_RUN_AS_ROOT=1
export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
export OMP_NUM_THREADS=1  # GCHP uses MPI, not OpenMP

# Update GCHP configuration files with our settings
if [[ -f "gchp.run" ]]; then
    # Update core count in run script
    sed -i "s/NX=.*/NX=$NX/" gchp.run
    sed -i "s/NY=.*/NY=$NY/" gchp.run
fi

if [[ -f "GCHP.rc" ]]; then
    # Update resolution in GCHP.rc
    sed -i "s/GCHP.GRIDNAME:.*/GCHP.GRIDNAME: PE${RESOLUTION}/" GCHP.rc
fi

# Validate that we have the GCHP executable
GCHP_EXE="/opt/geoschem/gchp/bin/gchp"
if [[ ! -f "$GCHP_EXE" ]]; then
    echo "Error: GCHP executable not found at $GCHP_EXE"
    exit 1
fi

# Check MPI installation
if ! command -v mpirun >/dev/null; then
    echo "Error: mpirun not found - MPI not properly installed"
    exit 1
fi

if [[ "$DRY_RUN" ]]; then
    echo "DRY RUN - would execute:"
    echo "cd $RUN_DIR"
    echo "mpirun -np $CORES $GCHP_EXE"
    echo ""
    echo "Configuration files in $RUN_DIR:"
    ls -la "$RUN_DIR"
    echo ""
    echo "MPI Info:"
    mpirun --version
else
    echo "Starting GCHP simulation..."
    echo "Working directory: $RUN_DIR"
    echo "Executable: $GCHP_EXE"
    echo "MPI processes: $CORES (${NX}x${NY} decomposition)"
    echo "Resolution: $RESOLUTION"
    echo "================================================"
    
    # Execute GCHP with MPI
    exec mpirun -np $CORES \
        --allow-run-as-root \
        --mca btl ^openib \
        --mca pml ucx \
        "$GCHP_EXE"
fi